; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25835.0 

	TITLE	C:\Users\DOTlaptop\Desktop\MyRepos2\Playground\Manual Compiled\Decimal_to_Binary_Conversion.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG8533	DB	'enter a positive number below 32768 ', 0aH, 00H
	ORG $+2
$SG8534	DB	'%d', 00H
	ORG $+1
$SG8535	DB	'originalNum in binary is:  ', 09H, '%d%d%d%d%d%d%d%d%d%d'
	DB	'%d%d%d%d%d%d ', 0aH, 00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	__vfscanf_l
PUBLIC	_scanf
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vfscanf:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_bit16$ = -68						; size = 4
_bit15$ = -64						; size = 4
_bit14$ = -60						; size = 4
_bit13$ = -56						; size = 4
_bit12$ = -52						; size = 4
_bit11$ = -48						; size = 4
_bit10$ = -44						; size = 4
_bit9$ = -40						; size = 4
_bit8$ = -36						; size = 4
_bit7$ = -32						; size = 4
_bit6$ = -28						; size = 4
_bit5$ = -24						; size = 4
_bit4$ = -20						; size = 4
_bit3$ = -16						; size = 4
_bit2$ = -12						; size = 4
_bit1$ = -8						; size = 4
_originalNum$ = -4					; size = 4
_main	PROC
; File c:\users\dotlaptop\desktop\myrepos2\playground\manual compiled\decimal_to_binary_conversion.c
; Line 12
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
; Line 13
	mov	DWORD PTR _originalNum$[ebp], 0
; Line 15
	push	OFFSET $SG8533
	call	_printf
	add	esp, 4
; Line 16
	lea	eax, DWORD PTR _originalNum$[ebp]
	push	eax
	push	OFFSET $SG8534
	call	_scanf
	add	esp, 8
; Line 35
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147418113			; 8000ffffH
	jns	SHORT $LN5@main
	dec	eax
	or	eax, -65536				; ffff0000H
	inc	eax
$LN5@main:
	cdq
	and	edx, 32767				; 00007fffH
	add	eax, edx
	sar	eax, 15					; 0000000fH
	mov	DWORD PTR _bit16$[ebp], eax
; Line 36
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147450881			; 80007fffH
	jns	SHORT $LN6@main
	dec	eax
	or	eax, -32768				; ffff8000H
	inc	eax
$LN6@main:
	cdq
	and	edx, 16383				; 00003fffH
	add	eax, edx
	sar	eax, 14					; 0000000eH
	mov	DWORD PTR _bit15$[ebp], eax
; Line 37
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147467265			; 80003fffH
	jns	SHORT $LN7@main
	dec	eax
	or	eax, -16384				; ffffc000H
	inc	eax
$LN7@main:
	cdq
	and	edx, 8191				; 00001fffH
	add	eax, edx
	sar	eax, 13					; 0000000dH
	mov	DWORD PTR _bit14$[ebp], eax
; Line 38
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147475457			; 80001fffH
	jns	SHORT $LN8@main
	dec	eax
	or	eax, -8192				; ffffe000H
	inc	eax
$LN8@main:
	cdq
	and	edx, 4095				; 00000fffH
	add	eax, edx
	sar	eax, 12					; 0000000cH
	mov	DWORD PTR _bit13$[ebp], eax
; Line 39
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147479553			; 80000fffH
	jns	SHORT $LN9@main
	dec	eax
	or	eax, -4096				; fffff000H
	inc	eax
$LN9@main:
	cdq
	and	edx, 2047				; 000007ffH
	add	eax, edx
	sar	eax, 11					; 0000000bH
	mov	DWORD PTR _bit12$[ebp], eax
; Line 40
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147481601			; 800007ffH
	jns	SHORT $LN10@main
	dec	eax
	or	eax, -2048				; fffff800H
	inc	eax
$LN10@main:
	cdq
	and	edx, 1023				; 000003ffH
	add	eax, edx
	sar	eax, 10					; 0000000aH
	mov	DWORD PTR _bit11$[ebp], eax
; Line 41
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147482625			; 800003ffH
	jns	SHORT $LN11@main
	dec	eax
	or	eax, -1024				; fffffc00H
	inc	eax
$LN11@main:
	cdq
	and	edx, 511				; 000001ffH
	add	eax, edx
	sar	eax, 9
	mov	DWORD PTR _bit10$[ebp], eax
; Line 42
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147483137			; 800001ffH
	jns	SHORT $LN12@main
	dec	eax
	or	eax, -512				; fffffe00H
	inc	eax
$LN12@main:
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	sar	eax, 8
	mov	DWORD PTR _bit9$[ebp], eax
; Line 43
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147483393			; 800000ffH
	jns	SHORT $LN13@main
	dec	eax
	or	eax, -256				; ffffff00H
	inc	eax
$LN13@main:
	cdq
	and	edx, 127				; 0000007fH
	add	eax, edx
	sar	eax, 7
	mov	DWORD PTR _bit8$[ebp], eax
; Line 44
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147483521			; 8000007fH
	jns	SHORT $LN14@main
	dec	eax
	or	eax, -128				; ffffff80H
	inc	eax
$LN14@main:
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	mov	DWORD PTR _bit7$[ebp], eax
; Line 45
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN15@main
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN15@main:
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	mov	DWORD PTR _bit6$[ebp], eax
; Line 46
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN16@main
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN16@main:
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	mov	DWORD PTR _bit5$[ebp], eax
; Line 47
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147483633			; 8000000fH
	jns	SHORT $LN17@main
	dec	eax
	or	eax, -16				; fffffff0H
	inc	eax
$LN17@main:
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _bit4$[ebp], eax
; Line 48
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN18@main
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN18@main:
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _bit3$[ebp], eax
; Line 49
	mov	eax, DWORD PTR _originalNum$[ebp]
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN19@main
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN19@main:
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _bit2$[ebp], eax
; Line 50
	mov	ecx, DWORD PTR _originalNum$[ebp]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN20@main
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN20@main:
	mov	DWORD PTR _bit1$[ebp], ecx
; Line 52
	mov	edx, DWORD PTR _bit1$[ebp]
	push	edx
	mov	eax, DWORD PTR _bit2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bit3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bit4$[ebp]
	push	edx
	mov	eax, DWORD PTR _bit5$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bit6$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bit7$[ebp]
	push	edx
	mov	eax, DWORD PTR _bit8$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bit9$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bit10$[ebp]
	push	edx
	mov	eax, DWORD PTR _bit11$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bit12$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bit13$[ebp]
	push	edx
	mov	eax, DWORD PTR _bit14$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bit15$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bit16$[ebp]
	push	edx
	push	OFFSET $SG8535
	call	_printf
	add	esp, 68					; 00000044H
$LN2@main:
; Line 54
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@main
	jmp	SHORT $LN2@main
$LN3@main:
; Line 55
	xor	eax, eax
; Line 56
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _scanf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_scanf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 1280
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 1283
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 1284
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	0
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfscanf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 1285
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 1286
	mov	eax, DWORD PTR __Result$[ebp]
; Line 1287
	mov	esp, ebp
	pop	ebp
	ret	0
_scanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 1062
	push	ebp
	mov	ebp, esp
; Line 1063
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_scanf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfscanf
	add	esp, 24					; 00000018H
; Line 1066
	pop	ebp
	ret	0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 954
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 957
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 958
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 959
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 960
	mov	eax, DWORD PTR __Result$[ebp]
; Line 961
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 642
	push	ebp
	mov	ebp, esp
; Line 643
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 644
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
; Line 94
	push	ebp
	mov	ebp, esp
; Line 96
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
; Line 97
	pop	ebp
	ret	0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
; Line 85
	push	ebp
	mov	ebp, esp
; Line 87
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 88
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
